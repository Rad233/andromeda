import net.fabricmc.loom.api.RemapConfigurationSettings

plugins {
    id 'fabric-loom' version '1.6-SNAPSHOT'
    id 'maven-publish'
    id 'io.freefair.lombok' version '8.3'
}

def local = !System.getenv().containsKey("GITHUB_RUN_NUMBER")

version = "${project.mod_version}-${project.minecraft_version}-${local ? 'local' : "build.${System.getenv("GITHUB_RUN_NUMBER")}"}"
loader_version = project.loader_version
group = project.maven_group

apply from: "https://raw.githubusercontent.com/constellation-mc/artifacts/main/artifacts.groovy"
constellationRepo(project, "dark-matter")
constellationRepo(project, "commander")
constellationRepo(project, "handy-tests")

repositories {
    maven { url "https://maven.shedaniel.me/" }
    maven { url "https://maven.terraformersmc.com/releases/" }
    mavenCentral()
    maven {
        name = "Modrinth"
        url = "https://api.modrinth.com/maven"
        content { includeGroup "maven.modrinth" }
    }
    maven { url 'https://jitpack.io' }
}

sourceSets {
    testmod {
        compileClasspath += main.compileClasspath
        runtimeClasspath += main.runtimeClasspath
    }
}

loom {
    addRemapConfiguration("testmodRemapImplementation", (RemapConfigurationSettings configuration) -> {
        configuration.getTargetConfigurationName().convention("testmodImplementation")
        configuration.getOnCompileClasspath().convention(true)
        configuration.getOnRuntimeClasspath().convention(true)
        configuration.getPublishingMode().convention(RemapConfigurationSettings.PublishingMode.COMPILE_AND_RUNTIME)
    })
}

dependencies {
    // To change the versions see the gradle.properties file
    minecraft "com.mojang:minecraft:${project.minecraft_version}"
    mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
    modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"

    // Fabric API. This is technically optional, but you probably want it anyway.
    modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"

    def dmModules = ["base", "mixin", "minecraft", "crash-handler", "data", "mirage", "glitter", "item-group"]
    for (final def module in dmModules) {
        modApi include("me.melontini:dark-matter-${module}:${project.dark_matter}")
    }

    modApi "me.melontini:commander:${project.commander_version}"

    modApi "com.terraformersmc:modmenu:${project.modmenu_version}"
    modApi("me.shedaniel.cloth:cloth-config-fabric:${project.cloth_version}") {
        exclude(group: "net.fabricmc.fabric-api")
    }

    testmodImplementation sourceSets.main.output
    testmodRemapImplementation "me.melontini:handy-tests:0.1.0-1.20.1-build.4"
}

loom {
    accessWidenerPath = file("src/main/resources/andromeda.accesswidener")

    runs {
        client {
            vmArgs("-XX:+IgnoreUnrecognizedVMOptions", "-XX:+AllowEnhancedClassRedefinition")
            property("mixin.debug.export", "true")
            runDir("run_client")
        }
        server {
            vmArgs("-XX:+IgnoreUnrecognizedVMOptions", "-XX:+AllowEnhancedClassRedefinition")
            property("mixin.debug.export", "true")
            runDir("run_server")
        }

        testClient {
            client()
            source sourceSets.testmod
            runDir("run_test_client")

            property("andromeda.enableAllModules", "true")
            property("andromeda.skipMixinErrorHandler", "true")
            property("andromeda.disableNetworkFeatures", "true")
            property("andromeda.printMissingTooltips", "true")
        }
        testServer {
            server()
            source sourceSets.testmod
            runDir("run_test_server")

            property("andromeda.enableAllModules", "true")
            property("andromeda.skipMixinErrorHandler", "true")
            property("andromeda.disableNetworkFeatures", "true")
        }
    }
}

loom.mods.register(project.name) {
    sourceSet project.sourceSets.main
}

loom.mods.register(project.name + "-testmod") {
    sourceSet project.sourceSets.testmod
}

processResources {
    def map = [
            "version": project.version,
            "minecraft_version": project.minecraft_version,
            "loader_version": project.loader_version,
            "fabric_version": project.fabric_version,
            "cloth_version": project.cloth_version,
            "modmenu_version": project.modmenu_version,
            "commander_version": project.commander_version
    ]
    inputs.properties(map)
    filteringCharset "UTF-8"

    filesMatching("fabric.mod.json") {
        expand map
    }
}

def targetJavaVersion = 17
tasks.withType(JavaCompile).configureEach {
    it.options.encoding = "UTF-8"
    it.options.release = targetJavaVersion
}

java {
    def javaVersion = JavaVersion.toVersion(targetJavaVersion)
    if (JavaVersion.current() < javaVersion) {
        toolchain.languageVersion = JavaLanguageVersion.of(targetJavaVersion)
    }
    withSourcesJar()
}

jar {
    from("LICENSE") {
        rename { "${it}_${project.archivesBaseName}" }
    }
}

sourcesJar {
    exclude {
        sourceSets.main.allSource.contains it.file
    }
    from delombok
}

tasks.register('printVersionName') {
    doLast {
        println "${project.mod_version} (${project.minecraft_version})"
    }
}

tasks.register('printVersion') {
    doLast {
        println version
    }
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java
        }
    }

    repositories {
        maven {
            name = "GitHubPackages"
            url = "https://maven.pkg.github.com/constellation-mc/andromeda"
            credentials {
                username = System.getenv("GITHUB_ACTOR")
                password = System.getenv("GITHUB_TOKEN")
            }
        }
    }
}
