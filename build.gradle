import com.github.spotbugs.snom.SpotBugsTask
import me.modmuss50.mpp.ReleaseType
import net.fabricmc.loom.api.RemapConfigurationSettings

plugins {
    alias libs.plugins.fabric.loom
    id 'maven-publish'
    alias libs.plugins.lombok
    alias libs.plugins.spotbugs.base
    alias libs.plugins.spotless
    alias libs.plugins.modmuss50.publish
}

def local = !System.getenv().containsKey("GITHUB_RUN_NUMBER")

version = "${project.mod_version}-${project.minecraft_version}-${local ? 'local' : "build.${System.getenv("GITHUB_RUN_NUMBER")}"}"
group = project.maven_group

apply from: "https://raw.githubusercontent.com/constellation-mc/artifacts/main/artifacts.groovy"
constellationRepo(project, "dark-matter")
constellationRepo(project, "commander")
constellationRepo(project, "handy-tests")

repositories {
    maven { url "https://maven.shedaniel.me/" }
    maven { url "https://maven.terraformersmc.com/releases/" }
    mavenCentral()
    maven {
        name = "Modrinth"
        url = "https://api.modrinth.com/maven"
        content { includeGroup "maven.modrinth" }
    }
    maven { url 'https://jitpack.io' }
}

sourceSets {
    testmod {
        compileClasspath += main.compileClasspath
        runtimeClasspath += main.runtimeClasspath
    }
}

loom {
    addRemapConfiguration("testmodRemapImplementation", (RemapConfigurationSettings configuration) -> {
        configuration.getTargetConfigurationName().convention("testmodImplementation")
        configuration.getSourceSet().convention(sourceSets.testmod)
        configuration.getOnCompileClasspath().convention(true)
        configuration.getOnRuntimeClasspath().convention(true)
        configuration.getPublishingMode().convention(RemapConfigurationSettings.PublishingMode.COMPILE_AND_RUNTIME)
    })
}

dependencies {
    // To change the versions see the gradle.properties file
    minecraft "com.mojang:minecraft:${project.minecraft_version}"
    mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
    modImplementation libs.fabric.loader

    // Fabric API. This is technically optional, but you probably want it anyway.
    modImplementation libs.fabric.api

    def dm = libs.dark.matter
    [dm.base, dm.mixin, dm.minecraft, dm.crash.handler, dm.data, dm.mirage, dm.glitter, dm.item.group].each {
        modApi it
        include it
    }

    modApi libs.commander
    modApi libs.modmenu
    modApi(libs.cloth.config) {
        exclude(group: "net.fabricmc.fabric-api")
    }

    testmodImplementation sourceSets.main.output
    testmodRemapImplementation(libs.handy.tests) {
        exclude(group: "net.fabricmc", module: "fabric-loader")
    }
}

tasks.register("spotbugs", SpotBugsTask) { task ->
    sourceSets.each {
        task.sourceDirs.from(task.sourceDirs.files, it.allSource.sourceDirectories)
        task.classDirs.from(task.classDirs.files, it.output)
        task.auxClassPaths.from(task.auxClassPaths.files, it.compileClasspath)
    }
    excludeFilter = file("spotbugs.xml")
    ignoreFailures = true
    reports {
        if (local) {
            html {
                required = true
                outputLocation = file("$buildDir/reports/spotbugs/main/spotbugs.html")
                stylesheet = 'fancy-hist.xsl'
            }
        } else {
            sarif {
                required = true
                outputLocation = file("$buildDir/reports/spotbugs/main/spotbugs.sarif")
            }
        }
    }
}

spotless {
    java {
        removeUnusedImports()
        trimTrailingWhitespace()
        formatAnnotations()
        importOrder('', 'java|javax', '\\#')
    }
}

loom {
    accessWidenerPath = file("src/main/resources/andromeda.accesswidener")

    runs {
        client {
            runDir("run_client")
        }
        server {
            runDir("run_server")
        }

        testClient {
            client()
            source sourceSets.testmod
            runDir("run_test_client")

            properties([
                    "handy-tests.auto-test": "true",
                    "andromeda.enableAllModules": "true",
                    "andromeda.skipMixinErrorHandler": "true",
                    "andromeda.disableNetworkFeatures": "true",
                    "andromeda.printMissingTooltips": "true",
            ])
        }
        testServer {
            server()
            source sourceSets.testmod
            runDir("run_test_server")

            properties([
                    "handy-tests.auto-test": "true",
                    "andromeda.enableAllModules": "true",
                    "andromeda.skipMixinErrorHandler": "true",
                    "andromeda.disableNetworkFeatures": "true"
            ])
        }
    }

    //https://gist.github.com/maityyy/3dbcd558d58a6412c3a2a38c72706e8e
    afterEvaluate {
        loom.runs.configureEach {
            vmArgs("-XX:+IgnoreUnrecognizedVMOptions", "-XX:+AllowEnhancedClassRedefinition")

            vmArg "-javaagent:${ configurations.compileClasspath.find { it.name.contains("sponge-mixin") } }"
            property("mixin.debug.export", "true")
        }
    }
}

loom.mods.register(project.name) {
    sourceSet project.sourceSets.main
}

loom.mods.register(project.name + "-testmod") {
    sourceSet project.sourceSets.testmod
}

processResources {
    def map = [
            "version": project.version,
            "minecraft_version": project.minecraft_version,
            "loader_version": libs.fabric.loader.get().version,
            "fabric_version": libs.fabric.api.get().version,
            "cloth_version": libs.cloth.config.get().version,
            "modmenu_version": libs.modmenu.get().version,
            "commander_version": libs.commander.get().version
    ]
    inputs.properties(map)
    filteringCharset "UTF-8"

    filesMatching("fabric.mod.json") {
        expand map
    }
}

def targetJavaVersion = 17
tasks.withType(JavaCompile).configureEach {
    it.options.encoding = "UTF-8"
    it.options.release = targetJavaVersion
}

java {
    def javaVersion = JavaVersion.toVersion(targetJavaVersion)
    if (JavaVersion.current() < javaVersion) {
        toolchain.languageVersion = JavaLanguageVersion.of(targetJavaVersion)
    }
    withSourcesJar()
}

jar {
    from("LICENSE") {
        rename { "${it}_${project.archivesBaseName}" }
    }
}

sourcesJar {
    exclude {
        sourceSets.main.allSource.contains it.file
    }
    from delombok
}

tasks.register('printVersionName') {
    doLast {
        println "${project.mod_version} (${project.minecraft_version})"
    }
}

tasks.register('printVersion') {
    doLast {
        println version
    }
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java
        }
    }

    repositories {
        maven {
            name = "GitHubPackages"
            url = "https://maven.pkg.github.com/constellation-mc/andromeda"
            credentials {
                username = System.getenv("GITHUB_ACTOR")
                password = System.getenv("GITHUB_TOKEN")
            }
        }
    }
}

publishMods {
    file = remapJar.archiveFile
    additionalFiles.from(remapSourcesJar.archiveFile)

    changelog = file("CHANGELOG.md").text
    type = ReleaseType.valueOf(providers.environmentVariable("VERSION_TYPE").getOrElse("BETA"))
    modLoaders.add("fabric")

    displayName = "${project.mod_version} (${project.minecraft_version})"

    modrinth {
        projectId = "TseYlb0f"
        accessToken = providers.environmentVariable("MODRINTH_TOKEN")
        minecraftVersions.add("${project.minecraft_version}")

        requires("fabric-api")
        optional("cloth-config")
        optional("modmenu")
        embeds("dark-matter")
    }
    curseforge {
        projectId = "639198"
        accessToken = providers.environmentVariable("CURSEFORGE_TOKEN")
        minecraftVersions.add("${project.minecraft_version}")

        requires("fabric-api")
        optional("cloth-config")
        optional("modmenu")
        embeds("dark-matter")
    }
    github {
        repository = "constellation-mc/andromeda"
        accessToken = providers.environmentVariable("GITHUB_TOKEN")
        commitish = providers.environmentVariable("GITHUB_SHA").getOrElse("${project.minecraft_version}-fabric")

        type = STABLE
    }

    dryRun = local
}
